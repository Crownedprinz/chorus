<project name="Chorus Build" default="build">
	<property name="configuration" value="debug"/>
	<property name="nant.settings.currentframework" value="net-2.0" />

  <target name="clean" description="Delete all previously compiled binaries.">
		<delete>
			<fileset>
				<exclude name="../.hg/**" />
				<exclude name="../lib/**" />
				<include name="../**/bin/**" />
				<include name="../**/obj/**" />
				<include name="../output/**" />
				<include name="../release/output/*" />
			</fileset>
		</delete>
	</target>

	<target name="revision_teamcityhg">
		<property name="teamcity" value="${environment::get-variable('BUILD_NUMBER')}" />
		<regex pattern="^(?'revision'[^:-]*)" input="${teamcity}" />
		<property name="revision" value="${string::trim(revision)}" />
		<echo message="Revision: ${revision}" />
	</target>

	<target name="version" depends="revision_teamcityhg">
		<loadfile property="version" file="version.txt">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<property name="version" value="${string::trim(version)}" />
		<echo message="Version: ${version}" />
	</target>

	<target name="assemblyinfo" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../**/AssemblyInfo.cs" />
					<exclude name="../lib" />
				</items>
			</in>
			<do>
				<script language="C#">
				<code><![CDATA[
				public static void ScriptMain(Project project)
				{
					StreamReader reader = new StreamReader(project.Properties["filename"]);
					string contents = reader.ReadToEnd();
					reader.Close();
					string replacement;
					string newText = contents;
					replacement = string.Format(
						"[assembly: AssemblyVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyVersion\("".*""\)\]", replacement);
					replacement = string.Format(
						"[assembly: AssemblyFileVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyFileVersion\("".*""\)\]", replacement);
					StreamWriter writer = new StreamWriter(project.Properties["filename"], false);
					writer.Write(newText);
					writer.Close();
				}
				]]>
				</code>
		  <imports>
			<import namespace="System.Text.RegularExpressions"/>
		  </imports>
			<references>
			  <include name="System.dll"/>
		  </references>
				</script>
			</do>
		</foreach>
	</target>

	<target name="build" description="Build all targets.">
		<call target="build.solution"/>
	</target>

	<target name="rebuild" depends="clean, build" />

  <target name="UnzipMercurial">
	<unzip zipfile="../lib/net2.0/Mercurial.zip"
		   todir="../output/common"/>
  </target>

  <target name="build.solution" depends="assemblyinfo">
	   <solution configuration="${configuration}" solutionfile="../src/Chorus VS2008.sln">
		</solution>

	<!-- <msbuild project="../src/Chorus VS2008.sln">
	  <property name="Configuration" value="Debug"/>
	</msbuild>
	-->
		<property name="expected.output" value="../output/${configuration}/LibChorus.dll"/>
		<fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
		<property name="expected.output" value="../output/${configuration}/ChorusMerge.exe"/>
		<fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
		<property name="expected.output" value="../output/${configuration}/Chorus.exe"/>
		<fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
	</target>

	<target name="test" depends="build">
		<nunit2>
			<formatter type="Plain" usefile="true" />
			<test>
		  <assemblies>
			<include name="../output/${configuration}/*.Tests.dll" />
		  </assemblies>
		  <categories>
				  <exclude name="SkipOnBuildServer"/>
				  <exclude name="MouseSensitive"/>
			<exclude name="RequiresUSB"/>
		  </categories>
			</test>
		</nunit2>
	</target>

	<target name="installerpre" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../release/*.iss" />
				</items>
			</in>
			<do>
				<property name="backupname" value="${string::replace(filename, 'iss', 'iss.bak')}" />
				<copy file="${filename}" tofile="${backupname}" overwrite="true" />
				<copy file="${backupname}" tofile="${filename}" overwrite="true">
					<filterchain>
						<expandproperties />
					</filterchain>
				</copy>
			</do>
		</foreach>
	</target>

	<target name="installerpost">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../release/*.iss" />
				</items>
			</in>
			<do>
				<property name="backupname" value="${string::replace(filename, 'iss', 'iss.bak')}" />
				<copy file="${backupname}" tofile="${filename}" overwrite="true" />
				<delete file="${backupname}" />
			</do>
		</foreach>
	</target>

	<target name="installer.win">
		<exec program="C:\Program Files\Inno Setup 5\ISCC.exe" append="true">
			<arg file="../release/solid.iss" />
		</exec>
	</target>

	<target name="installer" depends="test">
		<call target="installerpre" />
		<call target="installer.win" />
		<call target="installerpost" />
	</target>

	<target name="publish" depends="installer">
		<exec program="ftp.exe">
			<arg line="-n -s:ftp.txt" />
		</exec>
	</target>

</project>
